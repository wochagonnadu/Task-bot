from datetime import datetime, time, timedelta
from typing import Optional, Tuple
from src.config import get_config

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = get_config()

def is_work_time(current_time: Optional[time] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–∏–º
    """
    if current_time is None:
        current_time = datetime.now().time()
    return config.work_start_time <= current_time <= config.work_end_time

def get_effective_work_time(start_time: datetime, end_time: datetime) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
    """
    if start_time > end_time:
        return 0

    total_minutes = 0
    current = start_time

    while current < end_time:
        if is_work_time(current.time()):
            total_minutes += 1
        current += timedelta(minutes=1)

    return total_minutes

def format_datetime(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    """
    return dt.strftime(config.datetime_format)

def format_date(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    """
    return dt.strftime(config.date_format)

def format_time(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    """
    return dt.strftime(config.time_format)

def parse_datetime(datetime_str: str) -> Optional[datetime]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime –æ–±—ä–µ–∫—Ç
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - DD.MM.YYYY HH:MM
    - YYYY-MM-DD HH:MM
    """
    formats = [
        "%d.%m.%Y %H:%M",  # —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        "%Y-%m-%d %H:%M",  # —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    ]
    
    for date_format in formats:
        try:
            return datetime.strptime(datetime_str, date_format)
        except ValueError:
            continue
    
    return None

def format_duration(minutes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –º–∏–Ω—É—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    –ü—Ä–∏–º–µ—Ä: 122 -> "2—á 2–º"
    """
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    if hours > 0 and remaining_minutes > 0:
        return f"{hours}—á {remaining_minutes}–º"
    elif hours > 0:
        return f"{hours}—á"
    else:
        return f"{minutes}–º"

def get_status_emoji(status: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    """
    status_emoji = {
        'not_started': 'üÜï',
        'in_progress': '‚ñ∂Ô∏è',
        'completed': '‚úÖ',
        'postponed': '‚è≥'
    }
    return status_emoji.get(status, '‚ùì')

def truncate_text(text: str, max_length: int = 100) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è—è –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    """
    if len_text := len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."
