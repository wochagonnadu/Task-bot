import os
import logging
import re
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Bot
from src.database.db import db
from src.database.models import User, Task

# Telegram Bot instance –¥–ª—è user_bot
user_bot = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ .env
WORK_START_TIME = os.getenv("WORK_START_TIME", "09:30")
WORK_END_TIME = os.getenv("WORK_END_TIME", "17:30")

def init_notifications(bot_instance: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ bot instance –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global user_bot
    user_bot = bot_instance

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    """
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    return text

async def send_task_assignment_notification(task_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    if not user_bot:
        logger.error("User bot not initialized for notifications")
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        task = await db.get(Task, task_id)
        if not task or not task.assignee_id or task.creator_id == task.assignee_id:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        assignee = await db.get(User, task.assignee_id)
        if not assignee or not assignee.telegram_id:
            return

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∑–∞–¥–∞—á–∏
        task_title = escape_markdown(task.title)
        due_date = escape_markdown(task.due_date.strftime('%d.%m.%Y'))
        
        message_text = (
            "üìã –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞\\!\n"
            f"üîπ *–ó–∞–¥–∞—á–∞*: {task_title}\n"
            f"üìÖ *–°—Ä–æ–∫*: {due_date}"
        )

        await user_bot.send_message(
            chat_id=assignee.telegram_id,
            text=message_text,
            parse_mode="MarkdownV2"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {assignee.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")

async def send_task_notifications(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 'not_started' –∏ 'in_progress'."""
    users = await db.get_all(User)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    for user in users:
        if not user.telegram_id:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ Telegram ID

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = await db.get_all(
            Task,
            assignee_id=user.id,
            status=["not_started", "in_progress"]
        )

        if not tasks:
            continue  # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        task_list = "\n".join(
            [f"üìå {task.title} (–¥–æ {task.due_date.strftime('%d.%m.%Y')})" for task in tasks]
        )

        message = f"üì¢ –£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ:\n\n{task_list}"

        try:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user.id}: {e}")

def start_scheduler(bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")  # –£–∫–∞–∑—ã–≤–∞–µ–º –ú–°–ö

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    hour_start, minute_start = map(int, WORK_START_TIME.split(":"))
    hour_end, minute_end = map(int, WORK_END_TIME.split(":"))

    scheduler.add_job(
        send_task_notifications,
        trigger=CronTrigger(hour=hour_start, minute=minute_start),
        args=[bot],
        id="morning_notifications",
        replace_existing=True,
    )

    scheduler.add_job(
        send_task_notifications,
        trigger=CronTrigger(hour=hour_end, minute=minute_end),
        args=[bot],
        id="evening_notifications",
        replace_existing=True,
    )

    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
