"""
Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy import select
import logging

from src.database.db import db
from src.database.models import User
from src.utils.invite_codes import validate_invite_code

logger = logging.getLogger(__name__)

import os

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_INVITE_CODE = 1
ENTER_MASTER_KEY = 2

# Callback data –¥–ª—è –∫–Ω–æ–ø–æ–∫
CALLBACK_ENTER_CODE = "enter_invite_code"
CALLBACK_ENTER_MASTER_KEY = "enter_master_key"

# –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
MASTER_KEY = os.getenv("MASTER_KEY")

class AuthMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, bot_type: str = 'user'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
        
        Args:
            bot_type: –¢–∏–ø –±–æ—Ç–∞ ('user' –∏–ª–∏ 'admin')
        """
        self.bot_type = bot_type
    
    async def __call__(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        if not update.effective_user:
            return False
            
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
        user = await self.get_user(user_id)
        if not user:
            if update.message:
                if self.bot_type == 'admin':
                    # Send welcome message first
                    if update.message.text == "/start":
                        from src.handlers.admin_bot.constants import WELCOME_MESSAGE
                        await update.message.reply_text(WELCOME_MESSAGE)
                        
                    keyboard = InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîë –í–≤–µ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á", callback_data=CALLBACK_ENTER_MASTER_KEY)
                    ]])
                    await update.message.reply_text(
                        "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á.",
                        reply_markup=keyboard
                    )
                    return ENTER_MASTER_KEY
                else:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                    keyboard = InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîë –í–≤–µ—Å—Ç–∏ –∫–æ–¥", callback_data=CALLBACK_ENTER_CODE)
                    ]])
                    
                    await update.message.reply_text(
                        "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                        reply_markup=keyboard
                    )
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ admin_bot
        if self.bot_type == 'admin' and user.role != 'admin':
            if update.message:
                await update.message.reply_text(
                    "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞"
                )
            return False
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['db_user'] = user
        return True

    async def get_user(self, telegram_id: int) -> Optional[User]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[User]: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
        """
        await db.fix_users_sequence()  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == telegram_id)
        async for session in db.get_session():
            result = await session.execute(stmt)
            user = result.scalar_one_or_none()
            return user

async def handle_invite_code_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –∫–æ–¥'"""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞: data={query.data}")
    
    await query.answer()
    
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:",
        reply_markup=None
    )
    return ENTER_INVITE_CODE

async def handle_invite_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    if not update.message or not update.message.text:
        return ConversationHandler.END
        
    code = update.message.text.strip()
    telegram_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {code}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        user = await validate_invite_code(code, telegram_id)
        
        if user:
            # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.username = update.effective_user.username
            user.full_name = update.effective_user.full_name
            await db.update(User, user.id, 
                role='user',
                username=update.effective_user.username,
                full_name=update.effective_user.full_name
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            await update.message.reply_text(
                "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
        else:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=CALLBACK_ENTER_CODE)
            ]])
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {code}")
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫.",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def cancel_invite_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
    await update.message.reply_text(
        "–í–≤–æ–¥ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏."
    )
    return ConversationHandler.END

async def handle_master_key_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á'"""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –≤–≤–æ–¥–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞: data={query.data}")
    
    await query.answer()
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á:",
        reply_markup=None
    )
    return ENTER_MASTER_KEY

async def handle_master_key_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    if not update.message or not update.message.text or not MASTER_KEY:
        return ConversationHandler.END
        
    key = update.message.text.strip()
    telegram_id = update.effective_user.id
    
    try:
        if key == MASTER_KEY:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = await AuthMiddleware().get_user(telegram_id)
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await db.update(User, user.id, role='admin')
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞
                async for session in db.get_session():
                    user = User(
                        telegram_id=telegram_id,
                        username=update.effective_user.username,
                        full_name=update.effective_user.full_name,
                        role='admin'
                    )
                    session.add(user)
                    await session.commit()
                
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {telegram_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            await update.message.reply_text(
                "‚úÖ –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–±–æ—Ç—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTER_MASTER_KEY
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END
