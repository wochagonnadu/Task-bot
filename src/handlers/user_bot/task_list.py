"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""

import logging
from telegram import Update, CallbackQuery
from telegram.ext import ContextTypes

from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload
from src.database.db import db, get_session
from src.database.models import User, Task
from src.utils.helpers import format_datetime
from .constants import (
    MY_TASKS_MESSAGE,
    TASK_LIST_ITEM,
    TASK_STATUSES
)
from .keyboards import create_tasks_keyboard, create_main_keyboard

logger = logging.getLogger(__name__)

async def get_user_tasks(user_id: int) -> list[Task]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ –Ω–∞—á–∞—Ç—ã—Ö –∑–∞–¥–∞—á —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    try:
        tasks = await db.get_tasks_with_relations(
            user_id,
            only_active=True  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ –Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞—á–∏
        )
        return tasks
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}", exc_info=True)
        return []

async def format_task_list(tasks: list[Task]) -> tuple[str, int]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    tasks_list = []
    for task in tasks:
        try:
            # –¢–∞–∫ –∫–∞–∫ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∏–º
            client_name = task.client.name if task.client else "–ù–µ —É–∫–∞–∑–∞–Ω"
            project_name = task.project.name if task.project else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            task_text = TASK_LIST_ITEM.format(
                title=task.title,
                status=TASK_STATUSES.get(task.status, task.status),
                deadline=format_datetime(task.due_date) if task.due_date else "–ù–µ —É–∫–∞–∑–∞–Ω",
                client=client_name,
                project=project_name
            )
            tasks_list.append(task_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task.id}: {e}", exc_info=True)
            continue
    
    return "\n".join(tasks_list), len(tasks)

async def update_task_message(query: CallbackQuery, user_id: int) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    async with get_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user.scalar_one_or_none()
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = (
                select(Task)
                .where(
                    and_(
                        Task.assignee_id == user.id,
                        Task.status.in_(['not_started', 'in_progress'])
                    )
                )
                .options(
                    selectinload(Task.client),
                    selectinload(Task.project)
                )
            )
            result = await session.execute(stmt)
            tasks = list(result.scalars().all())

            if not tasks:
                await query.edit_message_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            tasks_list, total_count = await format_task_list(tasks)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = MY_TASKS_MESSAGE.format(
                tasks_list=tasks_list,
                total_count=total_count
            )
            await query.edit_message_text(
                message_text,
                reply_markup=create_tasks_keyboard(tasks),
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")

async def my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_by_field(User, 'telegram_id', update.effective_user.id)

        if not user:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.",
                reply_markup=create_main_keyboard()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ –Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞—á–∏
        tasks = await get_user_tasks(user.id)

        if not tasks:
            await update.message.reply_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
                reply_markup=create_main_keyboard()
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_list, total_count = await format_task_list(tasks)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = MY_TASKS_MESSAGE.format(
            tasks_list=tasks_list,
            total_count=total_count
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–¥–∞—á
        keyboard = create_tasks_keyboard(tasks)

        await update.message.reply_text(
            message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )