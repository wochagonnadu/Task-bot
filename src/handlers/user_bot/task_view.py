"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á"""

import logging
from telegram import Update
from telegram.ext import ContextTypes

from src.database.db import db
from src.database.models import User, Task
from src.utils.helpers import format_datetime, truncate_text, get_status_emoji
from .constants import TASK_STATUSES
from .keyboards import create_main_keyboard

logger = logging.getLogger(__name__)

async def view_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ"""
    try:
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /view_task <ID –∑–∞–¥–∞—á–∏>",
                reply_markup=create_main_keyboard()
            )
            return

        task_id = int(context.args[0])
        task = db.get(Task, task_id)

        if not task:
            await update.message.reply_text(
                "‚ùå –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=create_main_keyboard()
            )
            return

        creator = db.get(User, task.creator_id)
        assignee = db.get(User, task.assignee_id) if task.assignee_id else None

        task_text = (
            f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:*\n\n"
            f"üÜî ID: `{task.id}`\n"
            f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {truncate_text(task.title)}\n"
        )
        if task.description:
            task_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {truncate_text(task.description)}\n"
        if task.deadline:
            task_text += f"‚è∞ –°—Ä–æ–∫: {format_datetime(task.deadline)}\n"
        
        task_text += f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator.full_name}\n"
        if assignee:
            task_text += f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee.full_name}\n"
        
        status_emoji = get_status_emoji(task.status)
        task_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {task.status}\n"
        task_text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {format_datetime(task.created_at)}\n"
        
        await update.message.reply_text(
            task_text,
            parse_mode='MarkdownV2',
            reply_markup=create_main_keyboard()
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞—á–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )