"""–§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞"""

from typing import List
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from src.database.models import Task
from .constants import (
    START_TASK,
    COMPLETE_TASK
)

def create_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = [
        [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"),
         KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")],
        [KeyboardButton("‚ùî –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )

def create_tasks_keyboard(tasks: List[Task]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫:
      1. –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)
      2. –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è ("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å" –∏–ª–∏ "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)
    
    Args:
        tasks: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Task
    """
    keyboard = []
    
    for task in tasks:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = "üîÑ" if task.status == "in_progress" else "‚≠ïÔ∏è"
        task_name = f"{status_emoji} {task.title[:30]}{'...' if len(task.title) > 30 else ''}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        if task.status == 'not_started':
            action_text = "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å"
            action_callback = START_TASK.format(task_id=task.id)
        else:  # in_progress
            action_text = "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"
            action_callback = COMPLETE_TASK.format(task_id=task.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.append([
            InlineKeyboardButton(task_name, callback_data=f"view_task_{task.id}"),
            InlineKeyboardButton(action_text, callback_data=action_callback)
        ])
    
    return InlineKeyboardMarkup(keyboard)

def create_task_control_keyboard(task: Task) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π"""
    keyboard = []
    
    if task.status == 'not_started':
        keyboard.append([
            InlineKeyboardButton(
                "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
                callback_data=START_TASK.format(task_id=task.id)
            )
        ])
    elif task.status == 'in_progress':
        keyboard.append([
            InlineKeyboardButton(
                "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É",
                callback_data=COMPLETE_TASK.format(task_id=task.id)
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    keyboard.append([
        InlineKeyboardButton(
            "üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á",
            callback_data="my_tasks"
        )
    ])
    
    return InlineKeyboardMarkup(keyboard)