"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
"""
from datetime import datetime
from src.database.models import User

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
    """
    if not text:
        return ""
    chars_to_escape = ['.', '-', '!', '*', '[', ']', '(', ')', '~', '>', '#', '+', '=', '|', '{', '}']
    text_str = str(text)
    for char in chars_to_escape:
        text_str = text_str.replace(char, f"\\{char}")
    return text_str

def format_task_details(
    title: str,
    description: str = "",
    due_date: datetime = None,
    executor: User = None,
    client_name: str = None,
    project_name: str = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        due_date: –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        executor: –û–±—ä–µ–∫—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        client_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    """
    details = [
        "*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n"
    ]
    
    if client_name:
        details.append(f"üè¢ *–ö–ª–∏–µ–Ω—Ç:* {escape_markdown(client_name)}")
    
    if project_name:
        details.append(f"üìÅ *–ü—Ä–æ–µ–∫—Ç:* {escape_markdown(project_name)}")
    
    details.append(f"üìã *–ù–∞–∑–≤–∞–Ω–∏–µ:* {escape_markdown(title)}")
    
    if description:
        details.append(f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {escape_markdown(description)}")
    
    if due_date:
        details.append(f"‚è∞ *–°—Ä–æ–∫:* {escape_markdown(due_date.strftime('%d.%m.%Y %H:%M'))}")
    
    executor_text = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    if executor:
        executor_text = executor.full_name or executor.username
    details.append(f"üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {escape_markdown(executor_text)}")
    
    return "\n".join(details)

def format_task_success(task_id: int, task_details: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    """
    success_text = [
        f"‚úÖ *–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\\!*\n",
        f"üÜî ID: `{task_id}`",
        f"üìã *–ù–∞–∑–≤–∞–Ω–∏–µ:* {escape_markdown(task_details['title'])}"
    ]
    
    if task_details.get('executor_name'):
        success_text.append(f"üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {escape_markdown(task_details['executor_name'])}")
    else:
        success_text.append("üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
    
    if task_details.get('due_date'):
        success_text.append(f"‚è∞ *–°—Ä–æ–∫:* {escape_markdown(task_details['due_date'].strftime('%d.%m.%Y %H:%M'))}")
    
    success_text.append(f"üìä *–°—Ç–∞—Ç—É—Å:* –ù–µ –Ω–∞—á–∞—Ç–∞")
    
    return "\n".join(success_text)