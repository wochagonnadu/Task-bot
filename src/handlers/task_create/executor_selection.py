"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
"""
from typing import List, Tuple
import logging

from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from src.database.models import User
from src.database.db import db
from .constants import CONFIRM, SELECT_EXECUTOR
from .keyboards import create_executor_keyboard
from .task_confirmation import show_task_confirmation

logger = logging.getLogger(__name__)

async def get_available_executors() -> List[Tuple[int, str]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        List[Tuple[int, str]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, full_name) –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        executors = await db.get_all(User)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(executors)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
        if not executors:
            logger.warning("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = [(user.id, (user.full_name or user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏")) 
                 for user in executors if user.id]
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {result}")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {str(e)}", exc_info=True)
        return []

async def handle_executor_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    logger.info("–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
    executors = await get_available_executors()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {executors}")
    
    if not executors:
        logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        message = (update.callback_query.message 
                  if update.callback_query 
                  else update.message)
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    executors_data = [{"id": ex_id, "name": name} for ex_id, name in executors]
    logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(executors_data)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    reply_markup = create_executor_keyboard(executors_data)
    
    message = (update.callback_query.message 
              if update.callback_query 
              else update.message)
    
    try:
        if update.callback_query:
            await message.edit_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:",
                reply_markup=reply_markup
            )
        else:
            await message.reply_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:",
                reply_markup=reply_markup
            )
        return SELECT_EXECUTOR
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {str(e)}", 
                    exc_info=True)
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        return ConversationHandler.END

async def handle_executor_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback
    """
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    try:
        if callback_data == "cancel_executor":
            await query.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return ConversationHandler.END
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ callback_data
        executor_id = int(callback_data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –ë–î
        executor = await db.get(User, executor_id)
        if not executor:
            logger.warning(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å ID {executor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await handle_executor_selection(update, context)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        context.user_data['assignee_id'] = executor_id
        executor_name = executor.full_name or executor.username
        
        await query.message.edit_text(f"üë§ –í—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return await show_task_confirmation(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {str(e)}", 
                    exc_info=True)
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        return ConversationHandler.END