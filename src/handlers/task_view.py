import logging
from telegram import Update
from telegram.ext import (
    ContextTypes,
    CommandHandler
)

from src.database.models import Task, User
from src.database.db import db
from src.utils.helpers import format_datetime, get_status_emoji, truncate_text

logger = logging.getLogger(__name__)

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    """
    try:
        is_group = update.effective_chat.type in ["group", "supergroup"]
        user = db.get_by_field(User, 'telegram_id', update.effective_user.id)
        
        if not user:
            await update.message.reply_text(
                "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return

        if is_group:
            tasks = db.get_all(Task, status='not_started')
        else:
            # –í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = db.get_all(Task, creator_id=user.id, status='not_started')
        
        if not tasks:
            await update.message.reply_text(
                "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç." if is_group else "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
            )
            return
        
        tasks_text = "*–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:*\n\n" if is_group else "*–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
        for task in tasks:
            status_emoji = get_status_emoji(task.status)
            tasks_text += f"{status_emoji} ID: `{task.id}` \\- {truncate_text(task.title)}\n"
            if task.description:
                tasks_text += f"üìù {truncate_text(task.description, max_length=50)}\n"
            if task.due_date:
                tasks_text += f"‚è∞ –°—Ä–æ–∫: {format_datetime(task.due_date)}\n"
            tasks_text += "\n"
        
        await update.message.reply_text(tasks_text, parse_mode='MarkdownV2')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def view_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –∑–∞–¥–∞—á–∏
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /view_task <ID –∑–∞–¥–∞—á–∏>"
            )
            return

        task_id = int(context.args[0])
        task = db.get_by_id(Task, task_id)

        if not task:
            await update.message.reply_text(
                "‚ùå –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        creator = db.get_by_id(User, task.creator_id)
        assignee = db.get_by_id(User, task.assignee_id) if task.assignee_id else None

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_text = (
            f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:*\n\n"
            f"üÜî ID: `{task.id}`\n"
            f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {truncate_text(task.title)}\n"
        )
        if task.description:
            task_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {truncate_text(task.description)}\n"
        if task.due_date:
            task_text += f"‚è∞ –°—Ä–æ–∫: {format_datetime(task.due_date)}\n"
        
        task_text += f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator.full_name}\n"
        if assignee:
            task_text += f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee.full_name}\n"
        
        status_emoji = get_status_emoji(task.status)
        task_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {task.status}\n"
        task_text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {format_datetime(task.created_at)}\n"
        
        await update.message.reply_text(task_text, parse_mode='MarkdownV2')

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞—á–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑ –∑–∞–¥–∞—á —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        user = db.get_by_field(User, 'telegram_id', update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        created_tasks = db.get_all(Task, creator_id=user.id)
        assigned_tasks = db.get_all(Task, assignee_id=user.id)

        if not created_tasks and not assigned_tasks:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        tasks_text = "*–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"
        
        if created_tasks:
            tasks_text += "*–°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏:*\n"
            for task in created_tasks:
                status_emoji = get_status_emoji(task.status)
                tasks_text += f"{status_emoji} ID: `{task.id}` \\- {truncate_text(task.title)}\n"
                if task.due_date:
                    tasks_text += f"‚è∞ –°—Ä–æ–∫: {format_datetime(task.due_date)}\n"
                tasks_text += "\n"

        if assigned_tasks:
            tasks_text += "\n*–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º:*\n"
            for task in assigned_tasks:
                status_emoji = get_status_emoji(task.status)
                tasks_text += f"{status_emoji} ID: `{task.id}` \\- {truncate_text(task.title)}\n"
                if task.due_date:
                    tasks_text += f"‚è∞ –°—Ä–æ–∫: {format_datetime(task.due_date)}\n"
                tasks_text += "\n"

        await update.message.reply_text(tasks_text, parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
view_task_handler = CommandHandler('view_task', view_task)
my_tasks_handler = CommandHandler('my_tasks', my_tasks)