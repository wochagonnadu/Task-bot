"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –±–æ—Ç–µ"""

import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

from src.database.db import db
from src.database.models import Project, Client
from .constants import PROJECT_LIST_MESSAGE
from .keyboards import get_projects_keyboard, get_clients_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
SELECT_CLIENT = 1
ENTER_PROJECT_NAME = 2
ENTER_PROJECT_DESCRIPTION = 3

async def projects_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /projects_list"""
    try:
        projects = db.get_all(Project)
        
        if not projects:
            await update.message.reply_text(
                "üìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_project –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞."
            )
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects_list = []
        active_count = 0
        completed_count = 0
        
        for project in projects:
            if project.status == 'active':
                active_count += 1
            elif project.status == 'completed':
                completed_count += 1
                
            client_name = project.client.name if project.client else "–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞"
            
            projects_list.append(
                f"üìÇ *{project.name}*\n"
                f"üè¢ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {project.status}\n"
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            PROJECT_LIST_MESSAGE.format(
                projects_list="\n".join(projects_list),
                total_count=len(projects),
                active_count=active_count,
                completed_count=completed_count
            ),
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def new_project_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    clients = db.get_all(Client)
    
    if not clients:
        await update.message.reply_text(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_client –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=get_clients_keyboard(clients, "select_client_for_project")
    )
    return SELECT_CLIENT

async def client_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    client_id = int(query.data.split('_')[-1])
    context.user_data['client_id'] = client_id
    
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:"
    )
    return ENTER_PROJECT_NAME

async def enter_project_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    context.user_data['project_name'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n"
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"
    )
    return ENTER_PROJECT_DESCRIPTION

async def skip_project_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    return await save_project(update, context, description=None)

async def enter_project_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    return await save_project(update, context, description=update.message.text)

async def save_project(update: Update, context: ContextTypes.DEFAULT_TYPE, description: str = None) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        project = db.create(Project,
            name=context.user_data['project_name'],
            description=description,
            client_id=context.user_data['client_id'],
            status='active'
        )
        
        client = db.get(Client, context.user_data['client_id'])
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–µ–∫—Ç \"{project.name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ \"{client.name}\"!",
            reply_markup=get_projects_keyboard(db.get_all(Project), "select_project")
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    return ConversationHandler.END

def setup_project_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    application.add_handler(CommandHandler("projects_list", projects_list_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    new_project_handler = ConversationHandler(
        entry_points=[CommandHandler("new_project", new_project_command)],
        states={
            SELECT_CLIENT: [
                CallbackQueryHandler(client_selected, pattern=r"^select_client_for_project_\d+$")
            ],
            ENTER_PROJECT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_project_name)
            ],
            ENTER_PROJECT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_project_description),
                CommandHandler("skip", skip_project_description)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_command)]
    )
    application.add_handler(new_project_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    application.add_handler(
        CallbackQueryHandler(
            projects_list_command,
            pattern=r"^show_project_\d+$"
        )
    )