"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –±–æ—Ç–µ"""

import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes
)

from src.database.db import db
from src.database.models import Task, User, Client, Project
from .keyboards import get_tasks_keyboard  # –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –∏–º—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

logger = logging.getLogger(__name__)

async def analytics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        tasks = db.get_all(Task)
        users = db.get_all(User)
        clients = db.get_all(Client)
        projects = db.get_all(Project)

        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
        total_tasks = len(tasks)
        completed_tasks = len([t for t in tasks if t.status == 'completed'])
        in_progress_tasks = len([t for t in tasks if t.status == 'in_progress'])
        not_started_tasks = len([t for t in tasks if t.status == 'not_started'])

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ä–æ–∫–∞–º
        overdue_tasks = len([t for t in tasks if t.due_date and t.due_date < datetime.now() and t.status != 'completed'])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        total_users = len(users)
        users_with_tasks = len(set(task.assignee_id for task in tasks if task.assignee_id))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º
        total_clients = len(clients)
        total_projects = len(projects)
        active_projects = len([p for p in projects if p.status == 'active'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        analytics_text = (
            "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            
            "*–ó–∞–¥–∞—á–∏:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_tasks}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_tasks}\n"
            f"‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {in_progress_tasks}\n"
            f"‚Ä¢ –ù–µ –Ω–∞—á–∞—Ç–æ: {not_started_tasks}\n"
            f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue_tasks}\n\n"
            
            "*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏: {users_with_tasks}\n\n"
            
            "*–ö–ª–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã:*\n"
            f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {total_projects}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {active_projects}\n\n"
            
            "*–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(completed_tasks/total_tasks*100):.1f}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {(total_tasks/users_with_tasks):.1f} –∑–∞–¥–∞—á/—á–µ–ª–æ–≤–µ–∫\n"
        ).replace(".", "\\.")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–ª—è MarkdownV2

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
        keyboard = await get_tasks_keyboard()

        await update.message.reply_text(
            analytics_text,
            parse_mode='MarkdownV2',
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def task_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /task_stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º"""
    try:
        now = datetime.now()
        last_month = now - timedelta(days=30)
        tasks = db.get_all(Task)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –º–µ—Å—è—Ü—É
        recent_tasks = [t for t in tasks if t.created_at >= last_month]
        completed_recent = len([t for t in recent_tasks if t.status == 'completed'])
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completed_tasks = [t for t in tasks if t.status == 'completed']
        avg_completion_time = 0
        if completed_tasks:
            completion_times = [(t.updated_at - t.created_at).days for t in completed_tasks]
            avg_completion_time = sum(completion_times) / len(completion_times)

        stats_text = (
            "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º*\n\n"
            
            "*–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:*\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á: {len(recent_tasks)}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_recent}\n"
            f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(completed_recent/len(recent_tasks)*100):.1f}%\n\n"
            
            "*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion_time:.1f} –¥–Ω–µ–π\n"
        ).replace(".", "\\.")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–ª—è MarkdownV2

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
        keyboard = await get_tasks_keyboard()

        await update.message.reply_text(
            stats_text,
            parse_mode='MarkdownV2',
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def setup_analytics_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    application.add_handler(CommandHandler("analytics", analytics_command))
    application.add_handler(CommandHandler("task_stats", task_stats_command))