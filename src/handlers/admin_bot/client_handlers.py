"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –±–æ—Ç–µ"""

import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

from src.database.db import db
from src.database.models import Client
from .constants import CLIENT_LIST_MESSAGE
from .keyboards import get_clients_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
ENTER_CLIENT_NAME = 1

async def clients_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clients_list"""
    try:
        clients = db.get_all(Client)
        
        if not clients:
            await update.message.reply_text(
                "üìù –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_client –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."
            )
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients_list = []
        active_projects_count = 0
        for client in clients:
            projects_count = len(client.projects)
            active_projects = len([p for p in client.projects if p.status == 'active'])
            active_projects_count += active_projects
            
            clients_list.append(
                f"üè¢ *{client.name}*\n"
                f"üìÇ –ü—Ä–æ–µ–∫—Ç–æ–≤: {projects_count} \\(–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_projects}\\)\n"
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            CLIENT_LIST_MESSAGE.format(
                clients_list="\n".join(clients_list),
                total_count=len(clients),
                active_projects_count=active_projects_count
            ),
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def new_client_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
    )
    return ENTER_CLIENT_NAME

async def enter_client_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    context.user_data['client_name'] = update.message.text
    return await save_client(update, context)

async def save_client(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        client = db.create(Client,
            name=context.user_data['client_name']
        )
        
        await update.message.reply_text(
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç \"{client.name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=get_clients_keyboard(db.get_all(Client), "select_client")
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    return ConversationHandler.END

def setup_client_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    application.add_handler(CommandHandler("clients_list", clients_list_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    new_client_handler = ConversationHandler(
        entry_points=[CommandHandler("new_client", new_client_command)],
        states={
            ENTER_CLIENT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_client_name)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_command)]
    )
    application.add_handler(new_client_handler)
