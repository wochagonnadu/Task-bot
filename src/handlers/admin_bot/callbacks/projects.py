"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""

import re
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from telegram.helpers import escape_markdown

from src.database.db import db
from src.database.models import Client, Project, Task, User
from ..keyboards import get_projects_keyboard
from ..constants import (
    CALLBACK_PROJECT_PREFIX,
    CALLBACK_PROJECT_ADD
)
from .utils import sort_tasks

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
ENTER_PROJECT_NAME = 2

async def handle_projects_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ ConversationHandler.END

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ callback-–∑–∞–ø—Ä–æ—Å—ã:
    - CALLBACK_PROJECT_ADD: –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    - CALLBACK_PROJECT_PREFIX: –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
    """
    query = update.callback_query
    await query.answer()
    
    if query.data == CALLBACK_PROJECT_ADD:
        await query.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:"
        )
        return ENTER_PROJECT_NAME
    
    elif query.data.startswith(CALLBACK_PROJECT_PREFIX):
        project_id = int(query.data.replace(CALLBACK_PROJECT_PREFIX, ""))
        project = await db.get(Project, project_id)
        
        if project:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
            client = await db.get(Client, project.client_id) if project.client_id else None

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            active_tasks = await db.get_all(
                Task,
                project_id=project_id,
                status=['in_progress', 'not_started']
            )
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
            sorted_tasks = sort_tasks(active_tasks)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = (
                f"üìä *–ü—Ä–æ–µ–∫—Ç:* {escape_markdown(project.name, version=2)}\n"
                f"üè¢ *–ö–ª–∏–µ–Ω—Ç:* {escape_markdown(client.name, version=2) if client else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(sorted_tasks)}\n\n"
                f"*–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            tasks_list = []
            for task in sorted_tasks:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ ID
                assignee = await db.get(User, task.assignee_id) if task.assignee_id else None
                assignee_name = assignee.full_name if assignee else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏
                status_emoji = {'not_started': '‚≠ïÔ∏è', 'in_progress': 'üîÑ'}.get(task.status, '‚ùì')
                task_str = (
                    f"{status_emoji} *{escape_markdown(task.title, version=2)}*\n"
                    f"üë§ {escape_markdown(assignee_name, version=2)}\n"
                )
                if task.due_date:
                    formatted_date = task.due_date.strftime('%d.%m.%Y')
                    task_str += f"üìÖ {formatted_date}\n"
                
                tasks_list.append(task_str)
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not tasks_list:
                tasks_list = ["_–£ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á_"]
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
            message = header + "\n\n".join(tasks_list)
            
            await query.message.edit_text(
                text=message,
                parse_mode='MarkdownV2'
            )
        else:
            await query.message.edit_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return ConversationHandler.END

async def handle_project_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–≤—Å–µ–≥–¥–∞ ConversationHandler.END)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project_name = update.message.text
        new_project = await db.create(Project, name=project_name)
        if new_project:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            projects = await db.get_all(Project)
            keyboard = await get_projects_keyboard(projects)
            
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ–µ–∫—Ç \"{project_name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:",
                reply_markup=keyboard
            )
            
        return ConversationHandler.END
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
        return ConversationHandler.END