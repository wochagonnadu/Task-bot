"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""

import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from src.database.db import db
from src.database.models import User
from src.utils.invite_codes import generate_invite_code, save_invite_code
from ..constants import (
    CALLBACK_EMPLOYEE_PREFIX,
    CALLBACK_EMPLOYEE_ADD,
    EMPLOYEE_TASKS_MESSAGE,
    EMPLOYEES_MENU_MESSAGE
)
from .utils import get_employee_active_tasks, format_employee_tasks
from ..keyboards import get_employees_keyboard

logger = logging.getLogger(__name__)

async def handle_employees_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ callback-–∑–∞–ø—Ä–æ—Å—ã:
    - CALLBACK_EMPLOYEE_ADD: –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    - CALLBACK_EMPLOYEE_PREFIX: –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == CALLBACK_EMPLOYEE_ADD:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            code, expires_at = await generate_invite_code()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ
            await save_invite_code(code, expires_at)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            formatted_date = expires_at.strftime('%d\\.%m\\.%Y %H:%M')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
            bot_username = "@pc\\_user\\_task\\_bot"
            message = (
                "üé´ *–ù–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è*\n\n"
                f"–ö–æ–¥: `{code}`\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {formatted_date}\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞: \n\n"
                f"{bot_username}\n\n"
                "–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è" 
            )

            await query.message.edit_text(
                message,
                parse_mode='MarkdownV2'
            )
        
        elif query.data == "back_to_employees":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employees = await db.get_all(User)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
            await query.message.edit_text(
                EMPLOYEES_MENU_MESSAGE,
            )
        
        elif query.data == EMPLOYEE_TASKS_MESSAGE:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employees = await db.get_all(User)
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º
            keyboard = await get_employees_keyboard(employees)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
            await query.message.edit_text(
                EMPLOYEES_MENU_MESSAGE,
            )
        
        elif query.data.startswith(CALLBACK_EMPLOYEE_PREFIX):
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ callback data
            employee_id = int(query.data.split('_')[-1])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
            users = await db.get_all(User)
            employee = next(
                (user for user in users if user.id == employee_id),
                None
            )
            if not employee:
                await query.message.edit_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            tasks = await get_employee_active_tasks(employee_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = format_employee_tasks(tasks)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
            employee_name = employee.full_name.replace('.', '\\.').replace('-', '\\-').replace('_', '\\_')
            tasks_list = stats['tasks_list'].replace('.', '\\.').replace('-', '\\-').replace('_', '\\_')
            nearest_deadline = stats['nearest_deadline'].replace('.', '\\.').replace('-', '\\-').replace('_', '\\_')
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = EMPLOYEE_TASKS_MESSAGE.format(
                employee_name=employee_name,
                tasks_list=tasks_list,
                total_tasks=stats['total_tasks'],
                in_progress_tasks=stats['in_progress_tasks'],
                not_started_tasks=stats['not_started_tasks'],
                nearest_deadline=nearest_deadline
            )

            await query.message.edit_text(
                text=message,
                parse_mode='MarkdownV2',
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ"
        )