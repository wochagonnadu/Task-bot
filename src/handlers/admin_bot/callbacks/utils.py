"""–û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

from datetime import datetime
from typing import List, Optional, Dict
from sqlalchemy import and_, select

from src.database.db import db
from src.database.models import Task, User
from ..constants import EMPLOYEE_TASK_ITEM, DATE_FORMAT


def format_tasks_list(tasks: List[Task]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    Args:
        tasks: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Task –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    """
    if not tasks:
        return "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    result = []
    for task in tasks:
        status_emoji = {
            'not_started': '‚≠ïÔ∏è',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ'
        }.get(task.status, '‚ùì')

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        assignee = db.get(User, task.assignee_id) if task.assignee_id else None
        assignee_name = assignee.full_name if assignee else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
        task_info = (
            f"{status_emoji} {task.title}\n"
            f"ID: {task.id}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if task.due_date:
            task_info += f"–°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y')}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        if task.client:
            task_info += f"–ö–ª–∏–µ–Ω—Ç: {task.client.name}\n"
        if task.project:
            task_info += f"–ü—Ä–æ–µ–∫—Ç: {task.project.name}\n"
        
        result.append(task_info)
    
    return "\n".join(result)


def sort_tasks(tasks: List[Task]) -> List[Task]:
    """
    –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –∏ —Å—Ç–∞—Ç—É—Å—É

    Args:
        tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    Returns:
        List[Task]: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    """
    return sorted(
        tasks,
        key=lambda x: (
            x.due_date or datetime.max,  # None –¥–∞—Ç—ã –≤ –∫–æ–Ω–µ—Ü
            # –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤: –≤ —Ä–∞–±–æ—Ç–µ -> –Ω–µ –Ω–∞—á–∞—Ç–æ
            {'in_progress': 0, 'not_started': 1}.get(x.status, 2)
        )
    )

async def get_tasks_statistics(tasks: List[Task]) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º

    Args:
        tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π {
            'total_count': int,
            'assignees_stats': {
                user_id: {
                    'name': str,
                    'count': int
                }
            }
        }
    """
    assignees_stats = {}
    
    for task in tasks:
        if task.assignee_id:
            if task.assignee_id not in assignees_stats:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –∏–∑ –ë–î
                assignee = await db.get(User, task.assignee_id)
                if not assignee:
                    continue
                    
                assignees_stats[task.assignee_id] = {
                    'name': assignee.full_name,
                    'count': 0
                }
            assignees_stats[task.assignee_id]['count'] += 1

    return {
        'total_count': len(tasks),
        'assignees_stats': assignees_stats
    }

def format_assignees_stats(assignees_stats: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º

    Args:
        assignees_stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    if not assignees_stats:
        return "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"
        
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_stats = sorted(
        assignees_stats.values(),
        key=lambda x: x['count'],
        reverse=True
    )
    
    return "\n".join(
        f"‚Ä¢ {stat['name']}: {stat['count']} –∑–∞–¥–∞—á"
        for stat in sorted_stats
    )

async def get_employee_active_tasks(employee_id: int) -> List[Task]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–≤ —Ä–∞–±–æ—Ç–µ –∏ –Ω–µ –Ω–∞—á–∞—Ç—ã–µ)
    
    Args:
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        
    Returns:
        List[Task]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    tasks = await db.get_tasks_with_relations(employee_id, only_active=True)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    return sorted(
        tasks,
        key=lambda x: x.due_date or datetime.max
    )

def format_employee_tasks(tasks: List[Task]) -> Dict[str, any]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    Args:
        tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        dict: {
            'tasks_list': str,
            'total_tasks': int,
            'in_progress_tasks': int,
            'not_started_tasks': int,
            'nearest_deadline': str
        }
    """
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = {
        'total_tasks': len(tasks),
        'in_progress_tasks': len([t for t in tasks if t.status == 'in_progress']),
        'not_started_tasks': len([t for t in tasks if t.status == 'not_started']),
        'nearest_deadline': '–ù–µ—Ç'
    }
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–¥–ª–∞–π–Ω
    active_tasks = [t for t in tasks if t.due_date]
    if active_tasks:
        nearest = min(active_tasks, key=lambda x: x.due_date)
        stats['nearest_deadline'] = nearest.due_date.strftime(DATE_FORMAT)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks_list = []
    for task in tasks:
        status_emoji = 'üîÑ' if task.status == 'in_progress' else '‚≠ïÔ∏è'
        deadline = task.due_date.strftime(DATE_FORMAT) if task.due_date else '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        tasks_list.append(EMPLOYEE_TASK_ITEM.format(
            status_emoji=status_emoji,
            title=task.title,
            deadline=deadline,
            client=task.client.name if task.client else '–ù–µ —É–∫–∞–∑–∞–Ω',
            project=task.project.name if task.project else '–ù–µ —É–∫–∞–∑–∞–Ω'
        ))
    
    stats['tasks_list'] = '\n'.join(tasks_list) if tasks_list else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á'
    return stats